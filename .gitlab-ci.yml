image: node:18.18-bullseye-slim

default:
  cache:  # Cache modules in between jobs for the same branch if package-lock.json file changes
    key: 
      prefix: $CI_COMMIT_REF_NAME
      files:
        - server/package-lock.json
        - client/package-lock.json
    paths:
      - client/build
      - server/.npm/
      - client/.npm/
  # run this before every job; will hit the cache first
  before_script:
   - cd server && npm ci --cache .npm --prefer-offline && cd ../client && npm ci --cache .npm --prefer-offline && cd ..


lint-server:
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH || $CI_COMMIT_BRANCH == 'staging'
  stage: lint 
  script:
    - cd server && ./node_modules/eslint/bin/eslint.js --ext js,mjs,cjs . 
  allow_failure: false

lint-client:
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH || $CI_COMMIT_BRANCH == 'staging'
  stage: lint 
  script:
    - cd client && ./node_modules/eslint/bin/eslint.js --ext js,jsx,mjs,cjs .
  allow_failure: false

stages:
  - lint
  - build
  - test
  - deploy

test-server:
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH || $CI_COMMIT_BRANCH == 'staging'
  stage: test
  allow_failure: false
  coverage: /All files[^|]*\|[^|]*\s+([\d\.]+)/
  script: 
    - cd server && npm run test
  artifacts:
    expire_in: 2 weeks
    when: always
    reports:
      junit: 
        - server/junit.xml
      coverage_report:
        coverage_format: cobertura
        path: server/coverage/cobertura-coverage.xml

build-frontend:
  stage: build
  allow_failure: false
  script:
    - cd client && npm run build
  only:
    refs:
      - main
      - staging
  artifacts:
    expire_in: 1 days
    when: on_success
    paths:
      - client/build


archive-and-send-deploy:
  rules:
    - if: $CI_COMMIT_TAG
    - if: '$CI_COMMIT_REF_NAME == "main"'
  dependencies:
    - "build-frontend"
  stage: deploy
  allow_failure: false
  variables:
    RELEASE_FILE: release-$CI_PROJECT_NAME-$CI_COMMIT_TAG-$CI_COMMIT_SHORT_SHA.tar.gz
  script:
    - tar -cvzf $RELEASE_FILE client/build
    - scp -r -i $AWS_PRIVATE_KEY $RELEASE_FILE bitnami@$AWS_HOST:~/520-Project-Israel-Kayci/client
    - ssh -i $AWS_PRIVATE_KEY bitnami@$AWS_HOST "cd 520-Project-Israel-Kayci && git pull origin $CI_COMMIT_TAG"
    - ssh -i $AWS_PRIVATE_KEY bitnami@$AWS_HOST "rm -rf ~/520-Project-Israel-Kayci/client/build && tar -xvzf $RELEASE_FILE ~/520-Project-Israel-Kayci/client/build"
